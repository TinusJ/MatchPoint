"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
//import * as firebase from "firebase";
var firebase = require("nativescript-plugin-firebase");
core_1.Injectable();
var AuthService = (function () {
    function AuthService() {
        if (!this.isIns) {
            this.initFirebase();
            this.isIns = true;
        }
    }
    AuthService.prototype.initFirebase = function () {
        var config = {
            apiKey: "AIzaSyBlMLzryIYIjW0Cse77Jm63Vq_sAdACLKw",
            authDomain: "https://match-point-5eb87.firebaseapp.com",
            databaseURL: "https://match-point-5eb87.firebaseio.com",
            projectId: "match-point-5eb87",
            //  storageBucket: "project-anubis.appspot.com",
            messagingSenderId: "13968492704"
        };
        firebase.init(config).then(function (instance) {
            console.log("firebase.init done");
        }, function (error) {
            console.log("firebase.init error: " + error);
        });
    };
    AuthService.prototype.isSignedIn = function () {
        firebase.getCurrentUser().then(function (user) {
            alert("User uid: " + user.uid);
            return true;
        }, function (error) {
            alert("Trouble in paradise: " + error);
        });
        return false;
    };
    AuthService.prototype.getAuth = function () {
        return firebase.auth();
    };
    AuthService.prototype.loginWithEmailAndPassword = function (email, password) {
        firebase.login({
            type: firebase.LoginType.PASSWORD,
            email: email,
            password: password
        }).then(function (result) {
            JSON.stringify(result);
            return true;
        }, function (errorMessage) {
            console.log(errorMessage);
        });
        return false;
    };
    AuthService.prototype.createUserWithEmailAndPassword = function (email, password) {
        firebase.createUser({
            email: email,
            password: password
        }).then(function (result) {
            alert("User created :" + result.key);
        }, function (errorMessage) {
            alert("no user created :" + errorMessage);
        });
    };
    AuthService.prototype.resetPassword = function (email) {
        firebase.resetPassword({
            email: email
        }).then(function () {
            alert('Password reset: check email please');
        }, function (errorMessage) {
            console.log(errorMessage);
        });
    };
    AuthService.prototype.changePassword = function (email, oldpassword, newpassword) {
        firebase.changePassword({
            email: email,
            oldPassword: oldpassword,
            newPassword: newpassword
        }).then(function () {
            alert('Password change was succesfull');
        }, function (errorMessage) {
            console.log(errorMessage);
        });
    };
    AuthService.prototype.facebookLogin = function () {
        firebase.login({
            type: firebase.LoginType.FACEBOOK,
            scope: ['public_profile', 'email'] // optional: defaults to ['public_profile', 'email']
        }).then(function (result) {
            JSON.stringify(result);
            return true;
        }, function (errorMessage) {
            console.log(errorMessage);
        });
        return false;
    };
    AuthService.prototype.googleLogin = function () {
        firebase.login({
            // note that you need to enable Google auth in your firebase instance
            type: firebase.LoginType.GOOGLE
        }).then(function (result) {
            JSON.stringify(result);
            return true;
        }, function (errorMessage) {
            console.log(errorMessage);
            return false;
        });
        return false;
    };
    AuthService.prototype.guestLogin = function () {
        firebase.login({
            type: firebase.LoginType.ANONYMOUS
        }).then(function (user) {
            alert("User uid: " + user.uid);
            return true;
        }, function (error) {
            alert("Trouble in paradise: " + error);
        });
        return false;
    };
    AuthService.prototype.phoneVerification = function (cell) {
        firebase.login({
            type: firebase.LoginType.PHONE,
            phoneOptions: {
                phoneNumber: cell,
                verificationPrompt: "The received verification code" // default "Verification code"
            }
        }).then(function (result) {
            JSON.stringify(result);
            return true;
        }, function (errorMessage) {
            console.log(errorMessage);
            return false;
        });
        return false;
    };
    return AuthService;
}());
exports.AuthService = AuthService;
//# sourceMappingURL=data:application/json;base64,